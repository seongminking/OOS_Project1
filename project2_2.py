# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V_nSFQV903-vcdHRRARaNFiIGwLWPhTH
"""

import pandas as pd
from sklearn.model_selection import train_test_split

def sort_dataset(dataset_df):
  dataset_df = dataset_df.sort_values(by='year')
  return dataset_df

def split_dataset(dataset_df):
  data = dataset_df.drop(columns='salary', axis=1)
  target = dataset_df['salary']*0.001
  return train_test_split(data, target, test_size=0.1015)

def extract_numerical_cols(dataset_df):
  dataset_df = dataset_df.loc[:,['age', 'G', 'PA', 'AB', 'R', 'H', '2B', '3B', 'HR', 'RBI', 'SB', 'CS', 'BB', 'HBP', 'SO', 'GDP', 'fly', 'war']]
  return dataset_df

def train_predict_decision_tree(X_train, Y_train, X_test):
  from sklearn.tree import DecisionTreeRegressor
  dt_reg = DecisionTreeRegressor()
  dt_reg.fit(X_train, Y_train)
  return dt_reg.predict(X_test)

def train_predict_random_forest(X_train, Y_train, X_test):
  from sklearn.ensemble import RandomForestRegressor
  rf_reg = RandomForestRegressor()
  rf_reg.fit(X_train, Y_train)
  return rf_reg.predict(X_test)

def train_predict_svm(X_train, Y_train, X_test):
  from sklearn.svm import SVR
  from sklearn.preprocessing import StandardScaler
  from sklearn.pipeline import make_pipeline

  svm_pipe = make_pipeline(
      StandardScaler(),
      SVR()
  )
  svm_pipe.fit(X_train, Y_train)
  return svm_pipe.predict(X_test)


def calculate_RMSE(labels, predictions):
  import numpy as np
  rmse = np.sqrt(np.mean((predictions-labels)**2))
  return rmse

if __name__=='__main__':
  data_df = pd.read_csv('2019_kbo_for_kaggle_v2.csv')

  sorted_df = sort_dataset(data_df)
  X_train, X_test, Y_train, Y_test = split_dataset(sorted_df)

  X_train = extract_numerical_cols(X_train)
  X_test = extract_numerical_cols(X_test)

  dt_predictions = train_predict_decision_tree(X_train, Y_train, X_test)
  rf_predictions = train_predict_random_forest(X_train, Y_train, X_test)
  svm_predictions = train_predict_svm(X_train, Y_train, X_test)

  print ("Decision Tree Test RMSE: ", calculate_RMSE(Y_test, dt_predictions))
  print ("Random Forest Test RMSE: ", calculate_RMSE(Y_test, rf_predictions))
  print ("SVM Test RMSE: ", calculate_RMSE(Y_test, svm_predictions))